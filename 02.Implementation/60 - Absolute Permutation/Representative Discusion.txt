I struggled a lot trying to understand which cases of k give absolute permutations.

Basically visualizing abs(pos_i - i) = k, is key:

1) The position of i must either be i+k or i-k. That is k positions to the right of i or the left of i
respectively. 

2) Lets take a look at it for k = 3 and i = 1, clearly the only valid positions are either 3 positions
to the right, i.e. 1+3 = 4, or 3 position to the left, i.e. 1-3 = -2. Obviously there are no positions
left of 1 so it MUST go to 3. 

3)Similarly for i = 2 and i = 3, there is nothing 3 positions to the left, so they must go to 5 and 6
respectively

4) Now comes the inresting part, what if i = 4? In that case 3 positions to the left is 4-3=1 which is
now empty! but what about 3 positions to the right at 4+3 = 7?

5) This ambiguity can be resolved easily because if we move 4 to 7th position, then i = 10 might want
that position too since 10-3 is a valid spot. But if 4 moves to 1st position then no other number can
contest it

6) Even for i = 5 and i = 6, their left spots are empty since i = 2 and i = 3 took 5th and 6th spots
respectively. So the first K numbers are kinda swapping with the next k numbers

7) Such a swap lets us permutate without any conflicts. So every 2*k consecutive numbers can swap thier
first k consecutive numbers with the second k consecutive numbers

8) So as long as the total number of numbers from 1 to N can be split into chunks of 2*k consecutive
numbers, we can perform such a swap

Example for n = 12 and k = 3 :-
Before Permutation: 1,2,3,4,5,6,7,8,9,10,11,12 
After Permutation : 4,5,6,1,2,3,10,11,12,7,8,9



If N is odd and K > 0 then immediately print -1. There exists no absolute permutation in this case,
because of the middle number in range [1..N]. If N is even and K > half N, print -1 immediately because
there can't exist a case in which every absolute value equals K. There are some links to explanation that
have been posted before, so I suggest read for clear information.



 A valid permutation could only be the circular rotation of the original sequence. 
 Left or right rotation does not matter. Take right rotation for analysis.
 For any original position i, after K times right rotation, its new position will be 
 PRi = (i+K)%N. 
 0. Any (i+K) <= N case, it satisfies the K distance requirement, so no need further check.
 1. Any (i+K) > N case, its position after rotation will be PR(i) = (i+K)-N, when and only when 
    i - PRi = K, the absolute permutation requirement can hold true.
        i - PRi = K
    ==> i - ((i+K) -N) = K
    ==> N - K = K
    ==> N = 2K
 So it must be N==2K to be able to generate a valid absolute permutation.

 Noted special case of K=0, no need rotation at all.
 Noted also the special case of N can be equally divided into several 2K scenario. Each 2K sub-group can 
 rotate as it own independently.

 To output the K right circular rotated permutation, we just need to calculate the original value i 
 for each PRi value of 1, 2, ..., N. So no need real rotation operation.